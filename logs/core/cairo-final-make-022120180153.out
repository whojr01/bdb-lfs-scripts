Makefile:1501: warning: overriding recipe for target 'recheck'
Makefile:1139: warning: ignoring old recipe for target 'recheck'
make  all-recursive
make[1]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12'
Makefile:1501: warning: overriding recipe for target 'recheck'
Makefile:1139: warning: ignoring old recipe for target 'recheck'
Making all in src
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/src'
make  all-am
make[3]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/src'
  CC       cairo-analysis-surface.lo
  CC       cairo-arc.lo
  CC       cairo-array.lo
  CC       cairo-atomic.lo
  CC       cairo-base64-stream.lo
cairo-base64-stream.c: In function '_cairo_base64_stream_write':
cairo-base64-stream.c:87:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
   dst[2] = '=';
   ~~~~~~~^~~~~
cairo-base64-stream.c:88:6: note: here
      case 1:
      ^~~~
  CC       cairo-base85-stream.lo
  CC       cairo-bentley-ottmann.lo
In file included from cairoint.h:2044:0,
                 from cairo-bentley-ottmann.c:39:
cairo-bentley-ottmann.c: In function '_pqueue_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-bentley-ottmann.c:695:17: note: in expansion of macro '_cairo_malloc_ab'
  new_elements = _cairo_malloc_ab (pq->max_size,
                 ^~~~~~~~~~~~~~~~
cairo-bentley-ottmann.c: In function '_cairo_bentley_ottmann_tessellate_polygon':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-bentley-ottmann.c:1488:16: note: in expansion of macro '_cairo_malloc_ab'
      event_y = _cairo_malloc_ab(sizeof (cairo_bo_event_t*), ymax);
                ^~~~~~~~~~~~~~~~
  CC       cairo-bentley-ottmann-rectangular.lo
In file included from cairoint.h:2044:0,
                 from cairo-bentley-ottmann-rectangular.c:39:
cairo-bentley-ottmann-rectangular.c: In function '_cairo_bentley_ottmann_tessellate_boxes':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-bentley-ottmann-rectangular.c:803:25: note: in expansion of macro '_cairo_malloc_ab'
      rectangles_chain = _cairo_malloc_ab (y_max, sizeof (rectangle_t *));
                         ^~~~~~~~~~~~~~~~
  CC       cairo-bentley-ottmann-rectilinear.lo
  CC       cairo-botor-scan-converter.lo
In file included from cairoint.h:2044:0,
                 from cairo-botor-scan-converter.c:43:
cairo-botor-scan-converter.c: In function 'pqueue_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-botor-scan-converter.c:822:17: note: in expansion of macro '_cairo_malloc_ab'
  new_elements = _cairo_malloc_ab (pq->max_size,
                 ^~~~~~~~~~~~~~~~
cairo-botor-scan-converter.c: In function 'render_rows':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-botor-scan-converter.c:1382:10: note: in expansion of macro '_cairo_malloc_ab'
  spans = _cairo_malloc_ab (num_spans, sizeof (cairo_half_open_span_t));
          ^~~~~~~~~~~~~~~~
At top level:
cairo-botor-scan-converter.c:2076:1: warning: 'botor_add_edge' defined but not used [-Wunused-function]
 botor_add_edge (cairo_botor_scan_converter_t *self,
 ^~~~~~~~~~~~~~
  CC       cairo-boxes.lo
In file included from cairoint.h:2044:0,
                 from cairo-boxes.c:34:
cairo-boxes.c: In function '_cairo_boxes_to_array':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-boxes.c:333:11: note: in expansion of macro '_cairo_malloc_ab'
     box = _cairo_malloc_ab (boxes->num_boxes, sizeof (cairo_box_t));
           ^~~~~~~~~~~~~~~~
  CC       cairo-boxes-intersect.lo
In file included from cairoint.h:2044:0,
                 from cairo-boxes-intersect.c:40:
cairo-boxes-intersect.c: In function 'pqueue_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-boxes-intersect.c:165:17: note: in expansion of macro '_cairo_malloc_ab'
  new_elements = _cairo_malloc_ab (pq->max_size,
                 ^~~~~~~~~~~~~~~~
  CC       cairo.lo
  CC       cairo-cache.lo
  CC       cairo-clip.lo
In file included from cairoint.h:2044:0,
                 from cairo-clip.c:42:
cairo-clip.c: In function '_cairo_clip_copy':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-clip.c:160:20: note: in expansion of macro '_cairo_malloc_ab'
      copy->boxes = _cairo_malloc_ab (clip->num_boxes, sizeof (cairo_box_t));
                    ^~~~~~~~~~~~~~~~
cairo-clip.c: In function '_cairo_clip_copy_region':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-clip.c:212:16: note: in expansion of macro '_cairo_malloc_ab'
  copy->boxes = _cairo_malloc_ab (clip->num_boxes, sizeof (cairo_box_t));
                ^~~~~~~~~~~~~~~~
cairo-clip.c: In function '_cairo_clip_copy_with_translation':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-clip.c:610:20: note: in expansion of macro '_cairo_malloc_ab'
      copy->boxes = _cairo_malloc_ab (clip->num_boxes, sizeof (cairo_box_t));
                    ^~~~~~~~~~~~~~~~
cairo-clip.c: In function '_cairo_clip_copy_rectangle_list':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-clip.c:777:15: note: in expansion of macro '_cairo_malloc_ab'
  rectangles = _cairo_malloc_ab (n_rects, sizeof (cairo_rectangle_t));
               ^~~~~~~~~~~~~~~~
  CC       cairo-clip-boxes.lo
  CC       cairo-clip-polygon.lo
  CC       cairo-clip-region.lo
In file included from cairoint.h:2044:0,
                 from cairo-clip-region.c:42:
cairo-clip-region.c: In function '_cairo_clip_extract_region':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-clip-region.c:64:6: note: in expansion of macro '_cairo_malloc_ab'
  r = _cairo_malloc_ab (clip->num_boxes, sizeof (cairo_rectangle_int_t));
      ^~~~~~~~~~~~~~~~
  CC       cairo-clip-surface.lo
  CC       cairo-color.lo
  CC       cairo-composite-rectangles.lo
  CC       cairo-compositor.lo
  CC       cairo-contour.lo
  CC       cairo-damage.lo
  CC       cairo-debug.lo
  CC       cairo-default-context.lo
  CC       cairo-device.lo
  CC       cairo-error.lo
  CC       cairo-fallback-compositor.lo
  CC       cairo-fixed.lo
  CC       cairo-font-face.lo
  CC       cairo-font-face-twin.lo
  CC       cairo-font-face-twin-data.lo
  CC       cairo-font-options.lo
  CC       cairo-freelist.lo
  CC       cairo-freed-pool.lo
  CC       cairo-gstate.lo
In file included from cairoint.h:2044:0,
                 from cairo-gstate.c:38:
cairo-gstate.c: In function '_cairo_gstate_set_dash':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-gstate.c:534:33: note: in expansion of macro '_cairo_malloc_ab'
     gstate->stroke_style.dash = _cairo_malloc_ab (gstate->stroke_style.num_dashes, sizeof (double));
                                 ^~~~~~~~~~~~~~~~
  CC       cairo-hash.lo
  CC       cairo-hull.lo
In file included from cairoint.h:2044:0,
                 from cairo-hull.c:37:
cairo-hull.c: In function '_cairo_hull_compute':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-hull.c:215:9: note: in expansion of macro '_cairo_malloc_ab'
  hull = _cairo_malloc_ab (num_hull, sizeof (cairo_hull_t));
         ^~~~~~~~~~~~~~~~
  CC       cairo-image-compositor.lo
In file included from cairoint.h:2044:0,
                 from cairo-image-compositor.c:44:
cairo-image-compositor.c: In function 'composite_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-image-compositor.c:868:12: note: in expansion of macro '_cairo_malloc_ab'
  pglyphs = _cairo_malloc_ab (info->num_glyphs, sizeof (pixman_glyph_t));
            ^~~~~~~~~~~~~~~~
  CC       cairo-image-info.lo
  CC       cairo-image-source.lo
In file included from cairoint.h:2044:0,
                 from cairo-image-source.c:45:
cairo-image-source.c: In function '_pixman_image_for_gradient':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-image-source.c:309:17: note: in expansion of macro '_cairo_malloc_ab'
  pixman_stops = _cairo_malloc_ab (pattern->n_stops,
                 ^~~~~~~~~~~~~~~~
  CC       cairo-image-surface.lo
In file included from cairoint.h:2044:0,
                 from cairo-image-surface.c:40:
cairo-image-surface.c: In function '_cairo_image_surface_create_from_image':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-image-surface.c:1116:8: note: in expansion of macro '_cairo_malloc_ab'
  mem = _cairo_malloc_ab (height, stride);
        ^~~~~~~~~~~~~~~~
  CC       cairo-line.lo
  CC       cairo-lzw.lo
  CC       cairo-matrix.lo
  CC       cairo-mask-compositor.lo
  CC       cairo-mesh-pattern-rasterizer.lo
  CC       cairo-mempool.lo
cairo-mempool.c: In function 'free_blocks':
cairo-mempool.c:128:9: warning: missed loop optimization, the loop counter may overflow [-Wunsafe-loop-optimizations]
      if (i + next_bits > last) {
         ^
cairo-mempool.c: In function '_cairo_mempool_alloc':
cairo-mempool.c:252:5: warning: missed loop optimization, the loop counter may overflow [-Wunsafe-loop-optimizations]
     for (b = bits; b <= pool->max_free_bits; b++) {
     ^~~
  CC       cairo-misc.lo
In file included from cairoint.h:2044:0,
                 from cairo-misc.c:41:
cairo-misc.c: In function 'cairo_glyph_allocate':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-misc.c:194:12: note: in expansion of macro '_cairo_malloc_ab'
     return _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
            ^~~~~~~~~~~~~~~~
cairo-misc.c: In function 'cairo_text_cluster_allocate':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-misc.c:244:12: note: in expansion of macro '_cairo_malloc_ab'
     return _cairo_malloc_ab (num_clusters, sizeof (cairo_text_cluster_t));
            ^~~~~~~~~~~~~~~~
  CC       cairo-mono-scan-converter.lo
In file included from cairoint.h:2044:0,
                 from cairo-mono-scan-converter.c:26:
cairo-mono-scan-converter.c: In function 'polygon_init':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-mono-scan-converter.c:126:23: note: in expansion of macro '_cairo_malloc_ab'
  polygon->y_buckets = _cairo_malloc_ab (h, sizeof (struct edge *));
                       ^~~~~~~~~~~~~~~~
cairo-mono-scan-converter.c: In function '_mono_scan_converter_init':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-mono-scan-converter.c:403:13: note: in expansion of macro '_cairo_malloc_ab'
  c->spans = _cairo_malloc_ab (max_num_spans,
             ^~~~~~~~~~~~~~~~
cairo-mono-scan-converter.c: In function 'mono_scan_converter_allocate_edges':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-mono-scan-converter.c:449:22: note: in expansion of macro '_cairo_malloc_ab'
  c->polygon->edges = _cairo_malloc_ab (num_edges, sizeof (struct edge));
                      ^~~~~~~~~~~~~~~~
  CC       cairo-mutex.lo
  CC       cairo-no-compositor.lo
  CC       cairo-observer.lo
  CC       cairo-output-stream.lo
  CC       cairo-paginated-surface.lo
  CC       cairo-path-bounds.lo
  CC       cairo-path.lo
In file included from cairoint.h:2044:0,
                 from cairo-path.c:37:
cairo-path.c: In function '_cairo_path_create_internal':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-path.c:332:15: note: in expansion of macro '_cairo_malloc_ab'
  path->data = _cairo_malloc_ab (path->num_data,
               ^~~~~~~~~~~~~~~~
  CC       cairo-path-fill.lo
  CC       cairo-path-fixed.lo
cairo-path-fixed.c: In function '_cairo_path_fixed_iter_is_fill_box':
cairo-path-fixed.c:1519:2: warning: this statement may fall through [-Wimplicit-fallthrough=]
  _cairo_path_fixed_iter_next_op (&iter);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-path-fixed.c:1520:5: note: here
     case CAIRO_PATH_OP_MOVE_TO: /* implicit close */
     ^~~~
  CC       cairo-path-in-fill.lo
  CC       cairo-path-stroke.lo
In file included from cairoint.h:2044:0,
                 from cairo-path-stroke.c:40:
cairo-path-stroke.c: In function '_tessellate_fan':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-path-stroke.c:283:12: note: in expansion of macro '_cairo_malloc_ab'
   points = _cairo_malloc_ab (num_points, sizeof (cairo_point_t));
            ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-path-stroke.c:331:12: note: in expansion of macro '_cairo_malloc_ab'
   points = _cairo_malloc_ab (num_points, sizeof (cairo_point_t));
            ^~~~~~~~~~~~~~~~
  CC       cairo-path-stroke-boxes.lo
In file included from cairoint.h:2044:0,
                 from cairo-path-stroke-boxes.c:40:
cairo-path-stroke-boxes.c: In function '_cairo_rectilinear_stroker_add_segment':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-path-stroke-boxes.c:174:21: note: in expansion of macro '_cairo_malloc_ab'
      new_segments = _cairo_malloc_ab (new_size, sizeof (segment_t));
                     ^~~~~~~~~~~~~~~~
  CC       cairo-path-stroke-polygon.lo
cairo-path-stroke-polygon.c: In function 'outer_close':
cairo-path-stroke-polygon.c:403:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ((in->dev_slope.x * out->dev_slope.x +
     ^
cairo-path-stroke-polygon.c:412:5: note: here
     case CAIRO_LINE_JOIN_MITER:
     ^~~~
  CC       cairo-path-stroke-traps.lo
cairo-path-stroke-traps.c: In function 'join':
cairo-path-stroke-traps.c:310:14: warning: this statement may fall through [-Wimplicit-fallthrough=]
     default: {
              ^
cairo-path-stroke-traps.c:464:5: note: here
     case CAIRO_LINE_JOIN_BEVEL: {
     ^~~~
  CC       cairo-path-stroke-tristrip.lo
  CC       cairo-pattern.lo
In file included from cairoint.h:2044:0,
                 from cairo-pattern.c:31:
cairo-pattern.c: In function '_cairo_gradient_pattern_init_copy':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pattern.c:268:19: note: in expansion of macro '_cairo_malloc_ab'
  pattern->stops = _cairo_malloc_ab (other->stops_size,
                   ^~~~~~~~~~~~~~~~
cairo-pattern.c: In function '_cairo_pattern_gradient_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pattern.c:1683:14: note: in expansion of macro '_cairo_malloc_ab'
  new_stops = _cairo_malloc_ab (new_size, sizeof (cairo_gradient_stop_t));
              ^~~~~~~~~~~~~~~~
cairo-pattern.c: In function 'cairo_mesh_pattern_get_path':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pattern.c:4425:18: note: in expansion of macro '_cairo_malloc_ab'
     path->data = _cairo_malloc_ab (path->num_data,
                  ^~~~~~~~~~~~~~~~
  CC       cairo-pen.lo
In file included from cairoint.h:2044:0,
                 from cairo-pen.c:39:
cairo-pen.c: In function '_cairo_pen_init':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pen.c:71:18: note: in expansion of macro '_cairo_malloc_ab'
  pen->vertices = _cairo_malloc_ab (pen->num_vertices,
                  ^~~~~~~~~~~~~~~~
cairo-pen.c: In function '_cairo_pen_init_copy':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pen.c:125:22: note: in expansion of macro '_cairo_malloc_ab'
      pen->vertices = _cairo_malloc_ab (pen->num_vertices,
                      ^~~~~~~~~~~~~~~~
cairo-pen.c: In function '_cairo_pen_add_points':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pen.c:155:17: note: in expansion of macro '_cairo_malloc_ab'
      vertices = _cairo_malloc_ab (num_vertices,
                 ^~~~~~~~~~~~~~~~
  CC       cairo-polygon.lo
In file included from cairoint.h:2044:0,
                 from cairo-polygon.c:38:
cairo-polygon.c: In function '_cairo_polygon_init_boxes':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-polygon.c:167:19: note: in expansion of macro '_cairo_malloc_ab'
  polygon->edges = _cairo_malloc_ab (polygon->edges_size,
                   ^~~~~~~~~~~~~~~~
cairo-polygon.c: In function '_cairo_polygon_init_box_array':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-polygon.c:215:19: note: in expansion of macro '_cairo_malloc_ab'
  polygon->edges = _cairo_malloc_ab (polygon->edges_size,
                   ^~~~~~~~~~~~~~~~
cairo-polygon.c: In function '_cairo_polygon_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-polygon.c:268:14: note: in expansion of macro '_cairo_malloc_ab'
  new_edges = _cairo_malloc_ab (new_size, sizeof (cairo_edge_t));
              ^~~~~~~~~~~~~~~~
  CC       cairo-polygon-intersect.lo
In file included from cairoint.h:2044:0,
                 from cairo-polygon-intersect.c:39:
cairo-polygon-intersect.c: In function '_pqueue_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-polygon-intersect.c:756:17: note: in expansion of macro '_cairo_malloc_ab'
  new_elements = _cairo_malloc_ab (pq->max_size,
                 ^~~~~~~~~~~~~~~~
  CC       cairo-polygon-reduce.lo
In file included from cairoint.h:2044:0,
                 from cairo-polygon-reduce.c:39:
cairo-polygon-reduce.c: In function '_pqueue_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-polygon-reduce.c:825:17: note: in expansion of macro '_cairo_malloc_ab'
  new_elements = _cairo_malloc_ab (pq->max_size,
                 ^~~~~~~~~~~~~~~~
  CC       cairo-raster-source-pattern.lo
  CC       cairo-recording-surface.lo
In file included from cairoint.h:2044:0,
                 from cairo-recording-surface.c:79:
cairo-recording-surface.c: In function '_cairo_recording_surface_create_bbtree':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-recording-surface.c:331:21: note: in expansion of macro '_cairo_malloc_ab'
  surface->indices = _cairo_malloc_ab (count, sizeof (int));
                     ^~~~~~~~~~~~~~~~
cairo-recording-surface.c: In function '_cairo_recording_surface_show_text_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-recording-surface.c:1054:20: note: in expansion of macro '_cairo_malloc_ab'
  command->glyphs = _cairo_malloc_ab (num_glyphs, sizeof (glyphs[0]));
                    ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-recording-surface.c:1062:22: note: in expansion of macro '_cairo_malloc_ab'
  command->clusters = _cairo_malloc_ab (num_clusters, sizeof (clusters[0]));
                      ^~~~~~~~~~~~~~~~
cairo-recording-surface.c: In function '_cairo_recording_surface_copy__glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-recording-surface.c:1320:20: note: in expansion of macro '_cairo_malloc_ab'
  command->glyphs = _cairo_malloc_ab (command->num_glyphs,
                    ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-recording-surface.c:1330:22: note: in expansion of macro '_cairo_malloc_ab'
  command->clusters = _cairo_malloc_ab (command->num_clusters,
                      ^~~~~~~~~~~~~~~~
  CC       cairo-rectangle.lo
  CC       cairo-rectangular-scan-converter.lo
In file included from cairoint.h:2044:0,
                 from cairo-rectangular-scan-converter.c:34:
cairo-rectangular-scan-converter.c: In function 'pqueue_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-rectangular-scan-converter.c:137:17: note: in expansion of macro '_cairo_malloc_ab'
  new_elements = _cairo_malloc_ab (pq->max_size,
                 ^~~~~~~~~~~~~~~~
cairo-rectangular-scan-converter.c: In function '_active_edges_to_spans':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-rectangular-scan-converter.c:370:17: note: in expansion of macro '_cairo_malloc_ab'
  sweep->spans = _cairo_malloc_ab (size, sizeof (cairo_half_open_span_t));
                 ^~~~~~~~~~~~~~~~
cairo-rectangular-scan-converter.c: In function '_cairo_rectangular_scan_converter_generate':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-rectangular-scan-converter.c:677:15: note: in expansion of macro '_cairo_malloc_ab'
  rectangles = _cairo_malloc_ab (self->num_rectangles + 1,
               ^~~~~~~~~~~~~~~~
  CC       cairo-region.lo
In file included from cairoint.h:2044:0,
                 from cairo-region.c:39:
cairo-region.c: In function 'cairo_region_create_rectangles':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-region.c:252:11: note: in expansion of macro '_cairo_malloc_ab'
  pboxes = _cairo_malloc_ab (count, sizeof (pixman_box32_t));
           ^~~~~~~~~~~~~~~~
  CC       cairo-rtree.lo
  CC       cairo-scaled-font.lo
  CC       cairo-shape-mask-compositor.lo
  CC       cairo-slope.lo
  CC       cairo-spans.lo
  CC       cairo-spans-compositor.lo
  CC       cairo-spline.lo
  CC       cairo-stroke-dash.lo
  CC       cairo-stroke-style.lo
In file included from cairoint.h:2044:0,
                 from cairo-stroke-style.c:36:
cairo-stroke-style.c: In function '_cairo_stroke_style_init_copy':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-stroke-style.c:73:16: note: in expansion of macro '_cairo_malloc_ab'
  style->dash = _cairo_malloc_ab (style->num_dashes, sizeof (double));
                ^~~~~~~~~~~~~~~~
  CC       cairo-surface.lo
cairo-surface.c: In function 'cairo_surface_create_similar':
cairo-surface.c:505:5: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
     if (unlikely (! CAIRO_CONTENT_VALID (content)))
     ^~
cairo-surface.c:508:9: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
         if (unlikely (other->status))
         ^~
  CC       cairo-surface-clipper.lo
  CC       cairo-surface-fallback.lo
  CC       cairo-surface-observer.lo
In file included from cairoint.h:2044:0,
                 from cairo-surface-observer.c:36:
cairo-surface-observer.c: In function '_cairo_surface_observer_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-surface-observer.c:1170:18: note: in expansion of macro '_cairo_malloc_ab'
     dev_glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
                  ^~~~~~~~~~~~~~~~
  CC       cairo-surface-offset.lo
In file included from cairoint.h:2044:0,
                 from cairo-surface-offset.c:38:
cairo-surface-offset.c: In function '_cairo_surface_offset_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-surface-offset.c:275:18: note: in expansion of macro '_cairo_malloc_ab'
     dev_glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
                  ^~~~~~~~~~~~~~~~
  CC       cairo-surface-snapshot.lo
  CC       cairo-surface-subsurface.lo
  CC       cairo-surface-wrapper.lo
In file included from cairoint.h:2044:0,
                 from cairo-surface-wrapper.c:38:
cairo-surface-wrapper.c: In function '_cairo_surface_wrapper_show_text_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-surface-wrapper.c:452:19: note: in expansion of macro '_cairo_malloc_ab'
      dev_glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
                   ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-surface-wrapper.c:484:19: note: in expansion of macro '_cairo_malloc_ab'
      dev_glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
                   ^~~~~~~~~~~~~~~~
  CC       cairo-time.lo
  CC       cairo-tor-scan-converter.lo
In file included from cairoint.h:2044:0,
                 from cairo-tor-scan-converter.c:96:
cairo-tor-scan-converter.c: In function 'polygon_reset':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-tor-scan-converter.c:972:23: note: in expansion of macro '_cairo_malloc_ab'
  polygon->y_buckets = _cairo_malloc_ab (num_buckets,
                       ^~~~~~~~~~~~~~~~
cairo-tor-scan-converter.c: In function 'glitter_scan_converter_reset':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-tor-scan-converter.c:1414:21: note: in expansion of macro '_cairo_malloc_ab'
  converter->spans = _cairo_malloc_ab (max_num_spans,
                     ^~~~~~~~~~~~~~~~
  CC       cairo-tor22-scan-converter.lo
In file included from cairoint.h:2044:0,
                 from cairo-tor22-scan-converter.c:96:
cairo-tor22-scan-converter.c: In function 'polygon_reset':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-tor22-scan-converter.c:854:23: note: in expansion of macro '_cairo_malloc_ab'
  polygon->y_buckets = _cairo_malloc_ab (num_buckets,
                       ^~~~~~~~~~~~~~~~
cairo-tor22-scan-converter.c: In function 'glitter_scan_converter_reset':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-tor22-scan-converter.c:1295:21: note: in expansion of macro '_cairo_malloc_ab'
  converter->spans = _cairo_malloc_ab (xmax - xmin,
                     ^~~~~~~~~~~~~~~~
  CC       cairo-clip-tor-scan-converter.lo
In file included from cairoint.h:2044:0,
                 from cairo-clip-tor-scan-converter.c:96:
cairo-clip-tor-scan-converter.c: In function 'polygon_reset':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-clip-tor-scan-converter.c:919:23: note: in expansion of macro '_cairo_malloc_ab'
  polygon->y_buckets = _cairo_malloc_ab (num_buckets,
                       ^~~~~~~~~~~~~~~~
  CC       cairo-toy-font-face.lo
  CC       cairo-traps.lo
In file included from cairoint.h:2044:0,
                 from cairo-traps.c:40:
cairo-traps.c: In function '_cairo_traps_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-traps.c:132:14: note: in expansion of macro '_cairo_malloc_ab'
  new_traps = _cairo_malloc_ab (new_size, sizeof (cairo_trapezoid_t));
              ^~~~~~~~~~~~~~~~
cairo-traps.c: In function '_cairo_traps_extract_region':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-traps.c:881:10: note: in expansion of macro '_cairo_malloc_ab'
  rects = _cairo_malloc_ab (traps->num_traps, sizeof (cairo_rectangle_int_t));
          ^~~~~~~~~~~~~~~~
  CC       cairo-tristrip.lo
In file included from cairoint.h:2044:0,
                 from cairo-tristrip.c:36:
cairo-tristrip.c: In function '_cairo_tristrip_grow':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-tristrip.c:96:11: note: in expansion of macro '_cairo_malloc_ab'
  points = _cairo_malloc_ab (new_size, sizeof (cairo_point_t));
           ^~~~~~~~~~~~~~~~
  CC       cairo-traps-compositor.lo
  CC       cairo-unicode.lo
In file included from cairoint.h:2044:0,
                 from cairo-unicode.c:43:
cairo-unicode.c: In function '_cairo_utf8_to_ucs4':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-unicode.c:280:10: note: in expansion of macro '_cairo_malloc_ab'
  str32 = _cairo_malloc_ab (n_chars + 1, sizeof (uint32_t));
          ^~~~~~~~~~~~~~~~
cairo-unicode.c: In function '_cairo_utf8_to_utf16':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-unicode.c:396:13: note: in expansion of macro '_cairo_malloc_ab'
     str16 = _cairo_malloc_ab (n16 + 1, sizeof (uint16_t));
             ^~~~~~~~~~~~~~~~
  CC       cairo-user-font.lo
  CC       cairo-version.lo
  CC       cairo-wideint.lo
  CC       cairo-cff-subset.lo
  CC       cairo-scaled-font-subsets.lo
In file included from cairoint.h:2044:0,
                 from cairo-scaled-font-subsets.c:44:
cairo-scaled-font-subsets.c: In function '_cairo_scaled_font_subsets_foreach_internal':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-scaled-font-subsets.c:1040:25: note: in expansion of macro '_cairo_malloc_ab'
     collection.glyphs = _cairo_malloc_ab (collection.glyphs_size, sizeof(unsigned long));
                         ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-scaled-font-subsets.c:1041:23: note: in expansion of macro '_cairo_malloc_ab'
     collection.utf8 = _cairo_malloc_ab (collection.glyphs_size, sizeof(char *));
                       ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-scaled-font-subsets.c:1042:32: note: in expansion of macro '_cairo_malloc_ab'
     collection.to_latin_char = _cairo_malloc_ab (collection.glyphs_size, sizeof(int));
                                ^~~~~~~~~~~~~~~~
  CC       cairo-truetype-subset.lo
  CC       cairo-type1-fallback.lo
  CC       cairo-type1-glyph-names.lo
  CC       cairo-type1-subset.lo
  CC       cairo-type3-glyph-surface.lo
  CC       cairo-pdf-operators.lo
In file included from cairoint.h:2044:0,
                 from cairo-pdf-operators.c:42:
cairo-pdf-operators.c: In function '_cairo_pdf_operators_emit_stroke_style':
cairo-malloc-private.h:128:50: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (b) * (unsigned) (size)))
                                                  ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-operators.c:640:13: note: in expansion of macro '_cairo_malloc_abc'
      dash = _cairo_malloc_abc (num_dashes, 2, sizeof (double));
             ^~~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-operators.c:656:14: note: in expansion of macro '_cairo_malloc_ab'
       dash = _cairo_malloc_ab (num_dashes, sizeof (double));
              ^~~~~~~~~~~~~~~~
  CC       cairo-pdf-shading.lo
In file included from cairoint.h:2044:0,
                 from cairo-pdf-shading.c:37:
cairo-pdf-shading.c: In function '_cairo_pdf_shading_generate_decode_array':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-shading.c:114:29: note: in expansion of macro '_cairo_malloc_ab'
     shading->decode_array = _cairo_malloc_ab (shading->decode_array_length,
                             ^~~~~~~~~~~~~~~~
  CC       cairo-deflate-stream.lo
  CC       cairo-xcb-connection.lo
  CC       cairo-xcb-connection-core.lo
In file included from cairoint.h:2044:0,
                 from cairo-xcb-connection-core.c:32:
cairo-xcb-connection-core.c: In function '_cairo_xcb_connection_do_put_subimage':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-xcb-connection-core.c:205:8: note: in expansion of macro '_cairo_malloc_ab'
  vec = _cairo_malloc_ab (entries_needed, sizeof (struct iovec));
        ^~~~~~~~~~~~~~~~
  CC       cairo-xcb-connection-render.lo
  CC       cairo-xcb-connection-shm.lo
  CC       cairo-xcb-screen.lo
  CC       cairo-xcb-shm.lo
  CC       cairo-xcb-surface.lo
  CC       cairo-xcb-surface-core.lo
  CC       cairo-xcb-surface-render.lo
In file included from cairoint.h:2044:0,
                 from cairo-xcb-surface-render.c:32:
cairo-xcb-surface-render.c: In function '_cairo_xcb_surface_set_clip_region':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-xcb-surface-render.c:225:10: note: in expansion of macro '_cairo_malloc_ab'
  rects = _cairo_malloc_ab (num_rects, sizeof (xcb_rectangle_t));
          ^~~~~~~~~~~~~~~~
cairo-xcb-surface-render.c: In function '_gradient_to_xcb':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-xcb-surface-render.c:810:6: note: in expansion of macro '_cairo_malloc_ab'
      _cairo_malloc_ab (*n_stops,
      ^~~~~~~~~~~~~~~~
cairo-xcb-surface-render.c: In function '_render_fill_boxes':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-xcb-surface-render.c:1370:11: note: in expansion of macro '_cairo_malloc_ab'
  xrects = _cairo_malloc_ab (max_count, sizeof (xcb_rectangle_t));
           ^~~~~~~~~~~~~~~~
cairo-xcb-surface-render.c: In function '_render_composite_boxes':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-xcb-surface-render.c:1435:15: note: in expansion of macro '_cairo_malloc_ab'
  clip_boxes = _cairo_malloc_ab (boxes->num_boxes, sizeof (xcb_rectangle_t));
               ^~~~~~~~~~~~~~~~
cairo-xcb-surface-render.c: In function '_can_composite_glyphs.isra.28':
cairo-xcb-surface-render.c:3985:5: warning: missed loop optimization, the loop counter may overflow [-Wunsafe-loop-optimizations]
     for (glyphs_end = glyphs + *num_glyphs; glyphs != glyphs_end; glyphs++) {
     ^~~
  CC       cairo-xcb-resources.lo
  CC       cairo-png.lo
In file included from cairoint.h:2044:0,
                 from cairo-png.c:39:
cairo-png.c: In function 'write_png':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-png.c:217:12: note: in expansion of macro '_cairo_malloc_ab'
     rows = _cairo_malloc_ab (clone->height, sizeof (png_byte*));
            ^~~~~~~~~~~~~~~~
cairo-png.c: In function 'read_png':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-png.c:666:12: note: in expansion of macro '_cairo_malloc_ab'
     data = _cairo_malloc_ab (png_height, stride);
            ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-png.c:672:20: note: in expansion of macro '_cairo_malloc_ab'
     row_pointers = _cairo_malloc_ab (png_height, sizeof (char *));
                    ^~~~~~~~~~~~~~~~
  CC       cairo-script-surface.lo
  CC       cairo-ft-font.lo
In file included from cairoint.h:2044:0,
                 from cairo-ft-font.c:42:
cairo-ft-font.c: In function '_get_bitmap_surface':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-ft-font.c:1162:13: note: in expansion of macro '_cairo_malloc_ab'
      data = _cairo_malloc_ab (height, stride);
             ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-ft-font.c:1216:10: note: in expansion of macro '_cairo_malloc_ab'
   data = _cairo_malloc_ab (height, stride);
          ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-ft-font.c:1237:13: note: in expansion of macro '_cairo_malloc_ab'
      data = _cairo_malloc_ab (height, stride);
             ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-ft-font.c:1272:13: note: in expansion of macro '_cairo_malloc_ab'
      data = _cairo_malloc_ab (height, stride);
             ^~~~~~~~~~~~~~~~
cairo-ft-font.c:1249:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (!own_buffer && library)
     ^
cairo-ft-font.c:1292:5: note: here
     default:
     ^~~~~~~
  CC       cairo-ps-surface.lo
In file included from cairoint.h:2044:0,
                 from cairo-ps-surface.c:57:
cairo-ps-surface.c: In function '_cairo_ps_surface_emit_pattern_stops':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-ps-surface.c:3596:16: note: in expansion of macro '_cairo_malloc_ab'
     allstops = _cairo_malloc_ab ((pattern->n_stops + 2), sizeof (cairo_ps_color_stop_t));
                ^~~~~~~~~~~~~~~~
  CC       cairo-pdf-surface.lo
In file included from cairoint.h:2044:0,
                 from cairo-pdf-surface.c:43:
cairo-pdf-surface.c: In function '_cairo_pdf_surface_emit_smask':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:2319:10: note: in expansion of macro '_cairo_malloc_ab'
  alpha = _cairo_malloc_ab ((image->width+7) / 8, image->height);
          ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:2322:10: note: in expansion of macro '_cairo_malloc_ab'
  alpha = _cairo_malloc_ab (image->height, image->width);
          ^~~~~~~~~~~~~~~~
cairo-pdf-surface.c: In function '_cairo_pdf_surface_emit_image':
cairo-malloc-private.h:128:50: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (b) * (unsigned) (size)))
                                                  ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:2485:13: note: in expansion of macro '_cairo_malloc_abc'
      data = _cairo_malloc_abc (image->width, image->height, 3);
             ^~~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:2490:13: note: in expansion of macro '_cairo_malloc_ab'
      data = _cairo_malloc_ab (image->width, image->height);
             ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:2494:13: note: in expansion of macro '_cairo_malloc_ab'
      data = _cairo_malloc_ab ((image->width+7) / 8, image->height);
             ^~~~~~~~~~~~~~~~
cairo-pdf-surface.c: In function '_cairo_pdf_surface_emit_pattern_stops':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:3519:16: note: in expansion of macro '_cairo_malloc_ab'
     allstops = _cairo_malloc_ab ((pattern->n_stops + 2), sizeof (cairo_pdf_color_stop_t));
                ^~~~~~~~~~~~~~~~
cairo-pdf-surface.c: In function '_cairo_pdf_surface_emit_type3_font_subset':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:5735:14: note: in expansion of macro '_cairo_malloc_ab'
     glyphs = _cairo_malloc_ab (font_subset->num_glyphs, sizeof (cairo_pdf_resource_t));
              ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:5739:14: note: in expansion of macro '_cairo_malloc_ab'
     widths = _cairo_malloc_ab (font_subset->num_glyphs, sizeof (double));
              ^~~~~~~~~~~~~~~~
cairo-pdf-surface.c: In function '_cairo_pdf_surface_show_text_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:7746:22: note: in expansion of macro '_cairo_malloc_ab'
      group->glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
                      ^~~~~~~~~~~~~~~~
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-pdf-surface.c:7757:24: note: in expansion of macro '_cairo_malloc_ab'
      group->clusters = _cairo_malloc_ab (num_clusters, sizeof (cairo_text_cluster_t));
                        ^~~~~~~~~~~~~~~~
cairo-pdf-surface.c: In function '_hash_data':
cairo-pdf-surface.c:4829:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 11: c+= ((uint32_t) data[10] << 24);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4830:5: note: here
     case 10: c+= ((uint32_t) data[9] << 16);
     ^~~~
cairo-pdf-surface.c:4830:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 10: c+= ((uint32_t) data[9] << 16);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4831:5: note: here
     case 9 : c+= ((uint32_t) data[8] << 8);
     ^~~~
cairo-pdf-surface.c:4831:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 9 : c+= ((uint32_t) data[8] << 8);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4832:5: note: here
     case 8 : b+= ((uint32_t) data[7] << 24);
     ^~~~
cairo-pdf-surface.c:4832:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 8 : b+= ((uint32_t) data[7] << 24);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4833:5: note: here
     case 7 : b+= ((uint32_t) data[6] << 16);
     ^~~~
cairo-pdf-surface.c:4833:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 7 : b+= ((uint32_t) data[6] << 16);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4834:5: note: here
     case 6 : b+= ((uint32_t) data[5] << 8);
     ^~~~
cairo-pdf-surface.c:4834:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 6 : b+= ((uint32_t) data[5] << 8);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4835:5: note: here
     case 5 : b+= data[4];
     ^~~~
cairo-pdf-surface.c:4835:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 5 : b+= data[4];
              ~^~~~~~~~~~
cairo-pdf-surface.c:4836:5: note: here
     case 4 : a+= ((uint32_t) data[3] << 24);
     ^~~~
cairo-pdf-surface.c:4836:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 4 : a+= ((uint32_t) data[3] << 24);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4837:5: note: here
     case 3 : a+= ((uint32_t) data[2] << 16);
     ^~~~
cairo-pdf-surface.c:4837:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 3 : a+= ((uint32_t) data[2] << 16);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4838:5: note: here
     case 2 : a+= ((uint32_t) data[1] << 8);
     ^~~~
cairo-pdf-surface.c:4838:15: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 2 : a+= ((uint32_t) data[1] << 8);
              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-pdf-surface.c:4839:5: note: here
     case 1 : a+= data[0];
     ^~~~
  CC       cairo-svg-surface.lo
In file included from cairoint.h:2044:0,
                 from cairo-svg-surface.c:43:
cairo-svg-surface.c: In function '_cairo_svg_surface_emit_pattern_stops':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-svg-surface.c:1659:10: note: in expansion of macro '_cairo_malloc_ab'
  stops = _cairo_malloc_ab (n_stops, sizeof (cairo_gradient_stop_t));
          ^~~~~~~~~~~~~~~~
cairo-svg-surface.c: In function 'base64_write_func':
cairo-svg-surface.c:1085:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
   dst[2] = '=';
   ~~~~~~~^~~~~
cairo-svg-surface.c:1086:6: note: here
      case 1:
      ^~~~
  CC       cairo-tee-surface.lo
In file included from cairoint.h:2044:0,
                 from cairo-tee-surface.c:41:
cairo-tee-surface.c: In function '_cairo_tee_surface_show_text_glyphs':
cairo-malloc-private.h:84:33: warning: '*' in boolean context, suggest '&&' instead [-Wint-in-bool-context]
    _cairo_malloc((unsigned) (a) * (unsigned) (size)))
                                 ^
cairo-malloc-private.h:63:6: note: in definition of macro '_cairo_malloc'
    ((size) ? malloc((unsigned) (size)) : NULL)
      ^~~~
cairo-tee-surface.c:355:19: note: in expansion of macro '_cairo_malloc_ab'
     glyphs_copy = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
                   ^~~~~~~~~~~~~~~~
  CCLD     libcairo.la
make[3]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/src'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/src'
Making all in doc
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/doc'
make  all-recursive
make[3]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/doc'
Making all in public
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/doc/public'
make  all-am
make[5]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/doc/public'
make[5]: Nothing to be done for 'all-am'.
make[5]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/doc/public'
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/doc/public'
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/doc'
make[4]: Nothing to be done for 'all-am'.
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/doc'
make[3]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/doc'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/doc'
Making all in util
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util'
make  all-recursive
make[3]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util'
Making all in .
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util'
make[4]: Nothing to be done for 'all-am'.
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util'
Making all in cairo-missing
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-missing'
  CC       strndup.lo
  CC       getline.lo
  CCLD     libcairo-missing.la
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-missing'
Making all in cairo-gobject
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-gobject'
  CC       libcairo_gobject_la-cairo-gobject-enums.lo
  CC       libcairo_gobject_la-cairo-gobject-structs.lo
  CCLD     libcairo-gobject.la
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-gobject'
Making all in cairo-script
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-script'
Making all in examples
make[5]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-script/examples'
make[5]: Nothing to be done for 'all'.
make[5]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-script/examples'
make[5]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-script'
  CC       libcairo_script_interpreter_la-cairo-script-file.lo
cairo-script-file.c: In function 'csi_file_getc':
cairo-script-file.c:835:16: warning: this statement may fall through [-Wimplicit-fallthrough=]
      file->rem = fread (file->bp = file->data, 1, CHUNK_SIZE, file->src);
      ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cairo-script-file.c:836:5: note: here
     case BYTES:
     ^~~~
  CC       libcairo_script_interpreter_la-cairo-script-hash.lo
  CC       libcairo_script_interpreter_la-cairo-script-interpreter.lo
  CC       libcairo_script_interpreter_la-cairo-script-objects.lo
  CC       libcairo_script_interpreter_la-cairo-script-operators.lo
cairo-script-operators.c: In function '_set_dash':
cairo-script-operators.c:4813:2: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
  if (_csi_unlikely ((unsigned) array->stack.len >= INT_MAX / sizeof (double)))
  ^~
cairo-script-operators.c:4815:6: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
      dashes = _csi_alloc (ctx, sizeof (double) * array->stack.len);
      ^~~~~~
cairo-script-operators.c: In function '_csi_ostack_get_matrix':
cairo-script-operators.c:458:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (obj->datum.array->stack.len == 6) {
     ^
cairo-script-operators.c:468:5: note: here
     default:
     ^~~~~~~
In file included from cairo-script-operators.c:39:0:
cairo-script-operators.c: In function 'end_array_construction':
cairo-script-private.h:136:7: warning: missed loop optimization, the loop counter may overflow [-Wunsafe-loop-optimizations]
    if (expr)                                    \
       ^
cairo-script-private.h:143:48: note: in expansion of macro '_CSI_BOOLEAN_EXPR'
 #define _csi_unlikely(expr) (__builtin_expect (_CSI_BOOLEAN_EXPR(expr), 0))
                                                ^~~~~~~~~~~~~~~~~
cairo-script-operators.c:99:9: note: in expansion of macro '_csi_unlikely'
     if (_csi_unlikely (! _csi_check_ostack (ctx, (CNT)))) \
         ^~~~~~~~~~~~~
cairo-script-operators.c:637:2: note: in expansion of macro 'check'
  check (len + 1);
  ^~~~~
  CC       libcairo_script_interpreter_la-cairo-script-scanner.lo
cairo-script-scanner.c: In function '_scan_file':
cairo-script-scanner.c:1056:23: warning: this statement may fall through [-Wimplicit-fallthrough=]
      scan->line_number++;
      ~~~~~~~~~~~~~~~~~^~
cairo-script-scanner.c:1057:2: note: here
  case 0x0:
  ^~~~
  CC       libcairo_script_interpreter_la-cairo-script-stack.lo
  CCLD     libcairo-script-interpreter.la
make[5]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-script'
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-script'
Making all in cairo-trace
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-trace'
  CC       libcairo_trace_la-trace.lo
trace.c: In function '_encode_string_literal':
trace.c:1821:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
      max -= 2;
      ~~~~^~~~
trace.c:1822:2: note: here
  case '\t':
  ^~~~
At top level:
trace.c:4875:1: warning: '_content_from_surface' defined but not used [-Wunused-function]
 _content_from_surface (cairo_surface_t *surface)
 ^~~~~~~~~~~~~~~~~~~~~
  CCLD     libcairo-trace.la
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-trace'
Making all in cairo-fdr
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-fdr'
  CC       cairo_fdr_la-fdr.lo
  CCLD     cairo-fdr.la
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-fdr'
Making all in cairo-sphinx
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-sphinx'
  CC       cairo_sphinx_la-fdr.lo
  CCLD     cairo-sphinx.la
  CC       cairo_sphinx-sphinx.o
sphinx.c: In function 'compare_images':
sphinx.c:547:5: warning: enumeration value 'CAIRO_FORMAT_RGB30' not handled in switch [-Wswitch]
     switch (cairo_image_surface_get_format (a)) {
     ^~~~~~
cd ../../boilerplate && make  libcairoboilerplate.la
make[5]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/boilerplate'
  CC       cairo-boilerplate-getopt.lo
  CC       cairo-boilerplate-system.lo
  CC       cairo-boilerplate.lo
  CC       cairo-boilerplate-xcb.lo
  CC       cairo-boilerplate-script.lo
  CC       cairo-boilerplate-ps.lo
  CC       cairo-boilerplate-pdf.lo
  CC       cairo-boilerplate-svg.lo
(cd . && sh ./make-cairo-boilerplate-constructors.sh cairo-boilerplate-getopt.c cairo-boilerplate-system.c cairo-boilerplate.c    cairo-boilerplate-xcb.c                       cairo-boilerplate-script.c   cairo-boilerplate-ps.c cairo-boilerplate-pdf.c cairo-boilerplate-svg.c                                                          ) > cairo-boilerplate-constructors.c
  CC       cairo-boilerplate-constructors.lo
  CCLD     libcairoboilerplate.la
make[5]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/boilerplate'
  CCLD     cairo-sphinx
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util/cairo-sphinx'
make[3]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/util'
Making all in boilerplate
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/boilerplate'
make  all-am
make[3]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/boilerplate'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/boilerplate'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/boilerplate'
Making all in test
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/test'
(cd . && sh ./make-cairo-test-constructors.sh a1-bug.c a1-clip.c a1-fill.c a1-image-sample.c a1-mask.c a1-mask-sample.c a1-sample.c a1-traps-sample.c a1-rasterisation.c a8-clear.c a8-mask.c aliasing.c alpha-similar.c arc-direction.c arc-infinite-loop.c arc-looping-dash.c api-special-cases.c big-line.c big-empty-box.c big-empty-triangle.c big-little-box.c big-little-triangle.c bug-spline.c big-trap.c bilevel-image.c bug-40410.c bug-51910.c bug-84115.c bug-bo-rectangular.c bug-bo-collins.c bug-bo-ricotz.c bug-source-cu.c bug-extents.c bug-seams.c caps.c checkerboard.c caps-joins.c caps-joins-alpha.c caps-joins-curve.c caps-tails-curve.c caps-sub-paths.c clear.c clear-source.c clip-all.c clip-complex-bug61592.c clip-complex-shape.c clip-contexts.c clip-disjoint.c clip-disjoint-hatching.c clip-disjoint-quad.c clip-device-offset.c clip-double-free.c clip-draw-unbounded.c clip-empty.c clip-empty-group.c clip-empty-save.c clip-fill.c clip-fill-no-op.c clip-fill-rule.c clip-fill-rule-pixel-aligned.c clip-group-shapes.c clip-image.c clip-intersect.c clip-mixed-antialias.c clip-nesting.c clip-operator.c clip-push-group.c clip-polygons.c clip-rectilinear.c clip-shape.c clip-stroke.c clip-stroke-no-op.c clip-text.c clip-twice.c clip-twice-rectangle.c clip-unbounded.c clip-zero.c clipped-group.c clipped-surface.c close-path.c close-path-current-point.c composite-integer-translate-source.c composite-integer-translate-over.c composite-integer-translate-over-repeat.c copy-disjoint.c copy-path.c coverage.c create-for-stream.c create-from-png.c create-from-png-stream.c culled-glyphs.c curve-to-as-line-to.c dash-caps-joins.c dash-curve.c dash-infinite-loop.c dash-no-dash.c dash-offset.c dash-offset-negative.c dash-scale.c dash-state.c dash-zero-length.c degenerate-arc.c degenerate-arcs.c degenerate-curve-to.c degenerate-dash.c degenerate-linear-gradient.c degenerate-path.c degenerate-pen.c degenerate-radial-gradient.c degenerate-rel-curve-to.c degenerate-solid-dash.c drunkard-tails.c device-offset.c device-offset-fractional.c device-offset-positive.c device-offset-scale.c error-setters.c extend-pad.c extend-pad-border.c extend-pad-similar.c extend-reflect.c extend-reflect-similar.c extend-repeat.c extend-repeat-similar.c extended-blend.c fallback.c fill-alpha.c fill-alpha-pattern.c fill-and-stroke.c fill-and-stroke-alpha.c fill-and-stroke-alpha-add.c fill-degenerate-sort-order.c fill-disjoint.c fill-empty.c fill-image.c fill-missed-stop.c fill-rule.c filter-bilinear-extents.c filter-nearest-offset.c filter-nearest-transformed.c finer-grained-fallbacks.c font-face-get-type.c font-matrix-translation.c font-options.c glyph-cache-pressure.c get-and-set.c get-clip.c get-group-target.c get-path-extents.c gradient-alpha.c gradient-constant-alpha.c gradient-zero-stops.c gradient-zero-stops-mask.c group-clip.c group-paint.c group-state.c group-unaligned.c half-coverage.c halo.c hatchings.c horizontal-clip.c huge-linear.c huge-radial.c image-surface-source.c image-bug-710072.c implicit-close.c infinite-join.c in-fill-empty-trapezoid.c in-fill-trapezoid.c invalid-matrix.c inverse-text.c inverted-clip.c joins.c joins-loop.c joins-star.c joins-retrace.c large-clip.c large-font.c large-source.c large-source-roi.c large-twin-antialias-mixed.c leaky-dash.c leaky-dashed-rectangle.c leaky-dashed-stroke.c leaky-polygon.c line-width.c line-width-large-overlap.c line-width-overlap.c line-width-scale.c line-width-tolerance.c line-width-zero.c linear-gradient.c linear-gradient-extend.c linear-gradient-large.c linear-gradient-one-stop.c linear-gradient-reflect.c linear-gradient-subset.c linear-step-function.c linear-uniform.c long-dashed-lines.c long-lines.c map-to-image.c mask.c mask-alpha.c mask-ctm.c mask-glyphs.c mask-surface-ctm.c mask-transformed-image.c mask-transformed-similar.c mesh-pattern.c mesh-pattern-accuracy.c mesh-pattern-conical.c mesh-pattern-control-points.c mesh-pattern-fold.c mesh-pattern-overlap.c mesh-pattern-transformed.c mime-data.c mime-surface-api.c miter-precision.c move-to-show-surface.c negative-stride-image.c new-sub-path.c nil-surface.c operator.c operator-alpha.c operator-alpha-alpha.c operator-clear.c operator-source.c outline-tolerance.c over-above-source.c over-around-source.c over-below-source.c over-between-source.c overlapping-boxes.c overlapping-glyphs.c overlapping-dash-caps.c paint.c paint-clip-fill.c paint-repeat.c paint-source-alpha.c paint-with-alpha.c paint-with-alpha-group-clip.c partial-clip-text.c partial-coverage.c pass-through.c path-append.c path-currentpoint.c path-stroke-twice.c path-precision.c pattern-get-type.c pattern-getters.c pdf-isolated-group.c pixman-downscale.c pixman-rotate.c png.c push-group.c push-group-color.c push-group-path-offset.c radial-gradient.c radial-gradient-extend.c radial-outer-focus.c random-clips.c random-intersections-eo.c random-intersections-nonzero.c random-intersections-curves-eo.c random-intersections-curves-nz.c raster-source.c record.c record1414x.c record2x.c record90.c recordflip.c record-extend.c record-mesh.c recording-surface-pattern.c recording-surface-extend.c rectangle-rounding-error.c rectilinear-fill.c rectilinear-grid.c rectilinear-miter-limit.c rectilinear-dash.c rectilinear-dash-scale.c rectilinear-stroke.c reflected-stroke.c rel-path.c rgb24-ignore-alpha.c rotate-image-surface-paint.c rotate-stroke-box.c rotated-clip.c rounded-rectangle-fill.c rounded-rectangle-stroke.c sample.c scale-down-source-surface-paint.c scale-offset-image.c scale-offset-similar.c scale-source-surface-paint.c scaled-font-zero-matrix.c stroke-ctm-caps.c stroke-clipped.c stroke-image.c stroke-open-box.c select-font-face.c select-font-no-show-text.c self-copy.c self-copy-overlap.c self-intersecting.c set-source.c show-glyphs-advance.c show-glyphs-many.c show-text-current-point.c shape-general-convex.c shape-sierpinski.c simple.c skew-extreme.c smask.c smask-fill.c smask-image-mask.c smask-mask.c smask-paint.c smask-stroke.c smask-text.c solid-pattern-cache-stress.c source-clip.c source-clip-scale.c source-surface-scale-paint.c spline-decomposition.c stride-12-image.c stroke-pattern.c subsurface.c subsurface-image-repeat.c subsurface-repeat.c subsurface-reflect.c subsurface-pad.c subsurface-modify-child.c subsurface-modify-parent.c subsurface-outside-target.c subsurface-scale.c subsurface-similar-repeat.c surface-finish-twice.c surface-pattern.c surface-pattern-big-scale-down.c surface-pattern-operator.c surface-pattern-scale-down.c surface-pattern-scale-down-extend.c surface-pattern-scale-up.c text-antialias.c text-antialias-subpixel.c text-cache-crash.c text-glyph-range.c text-pattern.c text-rotate.c text-transform.c text-zero-len.c tighten-bounds.c tiger.c toy-font-face.c transforms.c translate-show-surface.c trap-clip.c twin.c twin-antialias-gray.c twin-antialias-mixed.c twin-antialias-none.c twin-antialias-subpixel.c unaligned-box.c unantialiased-shapes.c unbounded-operator.c unclosed-strokes.c user-data.c user-font.c user-font-mask.c user-font-proxy.c user-font-rescale.c world-map.c white-in-noop.c xcb-huge-image-shm.c xcb-huge-subimage.c xcb-stress-cache.c xcb-snapshot-assert.c xcomposite-projection.c xlib-expose-event.c zero-alpha.c zero-mask.c pthread-same-source.c pthread-show-text.c pthread-similar.c  bitmap-font.c ft-font-create-for-ft-face.c ft-show-glyphs-positioning.c ft-show-glyphs-table.c ft-text-vertical-layout-type1.c ft-text-vertical-layout-type3.c ft-text-antialias-none.c    pdf-features.c pdf-mime-data.c pdf-surface-source.c ps-eps.c ps-features.c ps-surface-source.c svg-surface.c svg-clip.c svg-surface-source.c  xcb-surface-source.c   multi-page.c fallback-resolution.c) > cairo-test-constructors.c || (rm cairo-test-constructors.c ; exit 1)
make  all-recursive
make[3]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/test'
Making all in pdiff
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/test/pdiff'
make  all-am
make[5]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/test/pdiff'
  CC       lpyramid.lo
  CC       pdiff.lo
  CCLD     libpdiff.la
make[5]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/test/pdiff'
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/test/pdiff'
Making all in .
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/test'
  CC       cairo_test_suite-buffer-diff.o
  CC       cairo_test_suite-cairo-test.o
  CC       cairo_test_suite-cairo-test-runner.o
  CC       cairo_test_suite-a1-bug.o
  CC       cairo_test_suite-a1-clip.o
  CC       cairo_test_suite-a1-fill.o
  CC       cairo_test_suite-a1-image-sample.o
  CC       cairo_test_suite-a1-mask.o
  CC       cairo_test_suite-a1-mask-sample.o
  CC       cairo_test_suite-a1-sample.o
  CC       cairo_test_suite-a1-traps-sample.o
  CC       cairo_test_suite-a1-rasterisation.o
  CC       cairo_test_suite-a8-clear.o
  CC       cairo_test_suite-a8-mask.o
  CC       cairo_test_suite-aliasing.o
  CC       cairo_test_suite-alpha-similar.o
  CC       cairo_test_suite-arc-direction.o
  CC       cairo_test_suite-arc-infinite-loop.o
  CC       cairo_test_suite-arc-looping-dash.o
  CC       cairo_test_suite-api-special-cases.o
  CC       cairo_test_suite-big-line.o
  CC       cairo_test_suite-big-empty-box.o
  CC       cairo_test_suite-big-empty-triangle.o
  CC       cairo_test_suite-big-little-box.o
  CC       cairo_test_suite-big-little-triangle.o
  CC       cairo_test_suite-bug-spline.o
  CC       cairo_test_suite-big-trap.o
  CC       cairo_test_suite-bilevel-image.o
  CC       cairo_test_suite-bug-40410.o
  CC       cairo_test_suite-bug-51910.o
  CC       cairo_test_suite-bug-84115.o
  CC       cairo_test_suite-bug-bo-rectangular.o
  CC       cairo_test_suite-bug-bo-collins.o
  CC       cairo_test_suite-bug-bo-ricotz.o
  CC       cairo_test_suite-bug-source-cu.o
  CC       cairo_test_suite-bug-extents.o
  CC       cairo_test_suite-bug-seams.o
  CC       cairo_test_suite-caps.o
  CC       cairo_test_suite-checkerboard.o
  CC       cairo_test_suite-caps-joins.o
  CC       cairo_test_suite-caps-joins-alpha.o
  CC       cairo_test_suite-caps-joins-curve.o
  CC       cairo_test_suite-caps-tails-curve.o
  CC       cairo_test_suite-caps-sub-paths.o
  CC       cairo_test_suite-clear.o
  CC       cairo_test_suite-clear-source.o
  CC       cairo_test_suite-clip-all.o
  CC       cairo_test_suite-clip-complex-bug61592.o
  CC       cairo_test_suite-clip-complex-shape.o
  CC       cairo_test_suite-clip-contexts.o
  CC       cairo_test_suite-clip-disjoint.o
  CC       cairo_test_suite-clip-disjoint-hatching.o
  CC       cairo_test_suite-clip-disjoint-quad.o
  CC       cairo_test_suite-clip-device-offset.o
  CC       cairo_test_suite-clip-double-free.o
  CC       cairo_test_suite-clip-draw-unbounded.o
  CC       cairo_test_suite-clip-empty.o
  CC       cairo_test_suite-clip-empty-group.o
  CC       cairo_test_suite-clip-empty-save.o
  CC       cairo_test_suite-clip-fill.o
  CC       cairo_test_suite-clip-fill-no-op.o
  CC       cairo_test_suite-clip-fill-rule.o
  CC       cairo_test_suite-clip-fill-rule-pixel-aligned.o
  CC       cairo_test_suite-clip-group-shapes.o
  CC       cairo_test_suite-clip-image.o
  CC       cairo_test_suite-clip-intersect.o
  CC       cairo_test_suite-clip-mixed-antialias.o
  CC       cairo_test_suite-clip-nesting.o
  CC       cairo_test_suite-clip-operator.o
  CC       cairo_test_suite-clip-push-group.o
  CC       cairo_test_suite-clip-polygons.o
  CC       cairo_test_suite-clip-rectilinear.o
  CC       cairo_test_suite-clip-shape.o
  CC       cairo_test_suite-clip-stroke.o
  CC       cairo_test_suite-clip-stroke-no-op.o
  CC       cairo_test_suite-clip-text.o
  CC       cairo_test_suite-clip-twice.o
  CC       cairo_test_suite-clip-twice-rectangle.o
  CC       cairo_test_suite-clip-unbounded.o
  CC       cairo_test_suite-clip-zero.o
  CC       cairo_test_suite-clipped-group.o
  CC       cairo_test_suite-clipped-surface.o
  CC       cairo_test_suite-close-path.o
  CC       cairo_test_suite-close-path-current-point.o
  CC       cairo_test_suite-composite-integer-translate-source.o
  CC       cairo_test_suite-composite-integer-translate-over.o
  CC       cairo_test_suite-composite-integer-translate-over-repeat.o
  CC       cairo_test_suite-copy-disjoint.o
  CC       cairo_test_suite-copy-path.o
  CC       cairo_test_suite-coverage.o
  CC       cairo_test_suite-create-for-stream.o
  CC       cairo_test_suite-create-from-png.o
  CC       cairo_test_suite-create-from-png-stream.o
  CC       cairo_test_suite-culled-glyphs.o
  CC       cairo_test_suite-curve-to-as-line-to.o
  CC       cairo_test_suite-dash-caps-joins.o
  CC       cairo_test_suite-dash-curve.o
  CC       cairo_test_suite-dash-infinite-loop.o
  CC       cairo_test_suite-dash-no-dash.o
  CC       cairo_test_suite-dash-offset.o
  CC       cairo_test_suite-dash-offset-negative.o
  CC       cairo_test_suite-dash-scale.o
  CC       cairo_test_suite-dash-state.o
  CC       cairo_test_suite-dash-zero-length.o
  CC       cairo_test_suite-degenerate-arc.o
  CC       cairo_test_suite-degenerate-arcs.o
  CC       cairo_test_suite-degenerate-curve-to.o
  CC       cairo_test_suite-degenerate-dash.o
  CC       cairo_test_suite-degenerate-linear-gradient.o
  CC       cairo_test_suite-degenerate-path.o
  CC       cairo_test_suite-degenerate-pen.o
  CC       cairo_test_suite-degenerate-radial-gradient.o
  CC       cairo_test_suite-degenerate-rel-curve-to.o
  CC       cairo_test_suite-degenerate-solid-dash.o
  CC       cairo_test_suite-drunkard-tails.o
  CC       cairo_test_suite-device-offset.o
  CC       cairo_test_suite-device-offset-fractional.o
  CC       cairo_test_suite-device-offset-positive.o
  CC       cairo_test_suite-device-offset-scale.o
  CC       cairo_test_suite-error-setters.o
  CC       cairo_test_suite-extend-pad.o
  CC       cairo_test_suite-extend-pad-border.o
  CC       cairo_test_suite-extend-pad-similar.o
  CC       cairo_test_suite-extend-reflect.o
  CC       cairo_test_suite-extend-reflect-similar.o
  CC       cairo_test_suite-extend-repeat.o
  CC       cairo_test_suite-extend-repeat-similar.o
  CC       cairo_test_suite-extended-blend.o
  CC       cairo_test_suite-fallback.o
  CC       cairo_test_suite-fill-alpha.o
  CC       cairo_test_suite-fill-alpha-pattern.o
  CC       cairo_test_suite-fill-and-stroke.o
  CC       cairo_test_suite-fill-and-stroke-alpha.o
  CC       cairo_test_suite-fill-and-stroke-alpha-add.o
  CC       cairo_test_suite-fill-degenerate-sort-order.o
  CC       cairo_test_suite-fill-disjoint.o
  CC       cairo_test_suite-fill-empty.o
  CC       cairo_test_suite-fill-image.o
  CC       cairo_test_suite-fill-missed-stop.o
  CC       cairo_test_suite-fill-rule.o
  CC       cairo_test_suite-filter-bilinear-extents.o
  CC       cairo_test_suite-filter-nearest-offset.o
  CC       cairo_test_suite-filter-nearest-transformed.o
  CC       cairo_test_suite-finer-grained-fallbacks.o
  CC       cairo_test_suite-font-face-get-type.o
  CC       cairo_test_suite-font-matrix-translation.o
  CC       cairo_test_suite-font-options.o
  CC       cairo_test_suite-glyph-cache-pressure.o
  CC       cairo_test_suite-get-and-set.o
  CC       cairo_test_suite-get-clip.o
  CC       cairo_test_suite-get-group-target.o
  CC       cairo_test_suite-get-path-extents.o
  CC       cairo_test_suite-gradient-alpha.o
  CC       cairo_test_suite-gradient-constant-alpha.o
  CC       cairo_test_suite-gradient-zero-stops.o
  CC       cairo_test_suite-gradient-zero-stops-mask.o
  CC       cairo_test_suite-group-clip.o
  CC       cairo_test_suite-group-paint.o
  CC       cairo_test_suite-group-state.o
  CC       cairo_test_suite-group-unaligned.o
  CC       cairo_test_suite-half-coverage.o
  CC       cairo_test_suite-halo.o
  CC       cairo_test_suite-hatchings.o
  CC       cairo_test_suite-horizontal-clip.o
  CC       cairo_test_suite-huge-linear.o
  CC       cairo_test_suite-huge-radial.o
  CC       cairo_test_suite-image-surface-source.o
  CC       cairo_test_suite-image-bug-710072.o
  CC       cairo_test_suite-implicit-close.o
  CC       cairo_test_suite-infinite-join.o
  CC       cairo_test_suite-in-fill-empty-trapezoid.o
  CC       cairo_test_suite-in-fill-trapezoid.o
  CC       cairo_test_suite-invalid-matrix.o
  CC       cairo_test_suite-inverse-text.o
  CC       cairo_test_suite-inverted-clip.o
  CC       cairo_test_suite-joins.o
  CC       cairo_test_suite-joins-loop.o
  CC       cairo_test_suite-joins-star.o
  CC       cairo_test_suite-joins-retrace.o
  CC       cairo_test_suite-large-clip.o
  CC       cairo_test_suite-large-font.o
  CC       cairo_test_suite-large-source.o
  CC       cairo_test_suite-large-source-roi.o
  CC       cairo_test_suite-large-twin-antialias-mixed.o
  CC       cairo_test_suite-leaky-dash.o
  CC       cairo_test_suite-leaky-dashed-rectangle.o
  CC       cairo_test_suite-leaky-dashed-stroke.o
  CC       cairo_test_suite-leaky-polygon.o
  CC       cairo_test_suite-line-width.o
  CC       cairo_test_suite-line-width-large-overlap.o
  CC       cairo_test_suite-line-width-overlap.o
  CC       cairo_test_suite-line-width-scale.o
  CC       cairo_test_suite-line-width-tolerance.o
  CC       cairo_test_suite-line-width-zero.o
  CC       cairo_test_suite-linear-gradient.o
  CC       cairo_test_suite-linear-gradient-extend.o
  CC       cairo_test_suite-linear-gradient-large.o
  CC       cairo_test_suite-linear-gradient-one-stop.o
  CC       cairo_test_suite-linear-gradient-reflect.o
  CC       cairo_test_suite-linear-gradient-subset.o
  CC       cairo_test_suite-linear-step-function.o
  CC       cairo_test_suite-linear-uniform.o
  CC       cairo_test_suite-long-dashed-lines.o
  CC       cairo_test_suite-long-lines.o
  CC       cairo_test_suite-map-to-image.o
  CC       cairo_test_suite-mask.o
  CC       cairo_test_suite-mask-alpha.o
  CC       cairo_test_suite-mask-ctm.o
  CC       cairo_test_suite-mask-glyphs.o
  CC       cairo_test_suite-mask-surface-ctm.o
  CC       cairo_test_suite-mask-transformed-image.o
  CC       cairo_test_suite-mask-transformed-similar.o
  CC       cairo_test_suite-mesh-pattern.o
  CC       cairo_test_suite-mesh-pattern-accuracy.o
  CC       cairo_test_suite-mesh-pattern-conical.o
  CC       cairo_test_suite-mesh-pattern-control-points.o
  CC       cairo_test_suite-mesh-pattern-fold.o
  CC       cairo_test_suite-mesh-pattern-overlap.o
  CC       cairo_test_suite-mesh-pattern-transformed.o
  CC       cairo_test_suite-mime-data.o
  CC       cairo_test_suite-mime-surface-api.o
  CC       cairo_test_suite-miter-precision.o
  CC       cairo_test_suite-move-to-show-surface.o
  CC       cairo_test_suite-negative-stride-image.o
  CC       cairo_test_suite-new-sub-path.o
  CC       cairo_test_suite-nil-surface.o
  CC       cairo_test_suite-operator.o
  CC       cairo_test_suite-operator-alpha.o
  CC       cairo_test_suite-operator-alpha-alpha.o
  CC       cairo_test_suite-operator-clear.o
  CC       cairo_test_suite-operator-source.o
  CC       cairo_test_suite-outline-tolerance.o
  CC       cairo_test_suite-over-above-source.o
  CC       cairo_test_suite-over-around-source.o
  CC       cairo_test_suite-over-below-source.o
  CC       cairo_test_suite-over-between-source.o
  CC       cairo_test_suite-overlapping-boxes.o
  CC       cairo_test_suite-overlapping-glyphs.o
  CC       cairo_test_suite-overlapping-dash-caps.o
  CC       cairo_test_suite-paint.o
  CC       cairo_test_suite-paint-clip-fill.o
  CC       cairo_test_suite-paint-repeat.o
  CC       cairo_test_suite-paint-source-alpha.o
  CC       cairo_test_suite-paint-with-alpha.o
  CC       cairo_test_suite-paint-with-alpha-group-clip.o
  CC       cairo_test_suite-partial-clip-text.o
  CC       cairo_test_suite-partial-coverage.o
  CC       cairo_test_suite-pass-through.o
  CC       cairo_test_suite-path-append.o
  CC       cairo_test_suite-path-currentpoint.o
  CC       cairo_test_suite-path-stroke-twice.o
  CC       cairo_test_suite-path-precision.o
  CC       cairo_test_suite-pattern-get-type.o
  CC       cairo_test_suite-pattern-getters.o
  CC       cairo_test_suite-pdf-isolated-group.o
  CC       cairo_test_suite-pixman-downscale.o
  CC       cairo_test_suite-pixman-rotate.o
  CC       cairo_test_suite-png.o
  CC       cairo_test_suite-push-group.o
  CC       cairo_test_suite-push-group-color.o
  CC       cairo_test_suite-push-group-path-offset.o
  CC       cairo_test_suite-radial-gradient.o
  CC       cairo_test_suite-radial-gradient-extend.o
  CC       cairo_test_suite-radial-outer-focus.o
  CC       cairo_test_suite-random-clips.o
  CC       cairo_test_suite-random-intersections-eo.o
  CC       cairo_test_suite-random-intersections-nonzero.o
  CC       cairo_test_suite-random-intersections-curves-eo.o
  CC       cairo_test_suite-random-intersections-curves-nz.o
  CC       cairo_test_suite-raster-source.o
  CC       cairo_test_suite-record.o
  CC       cairo_test_suite-record1414x.o
  CC       cairo_test_suite-record2x.o
  CC       cairo_test_suite-record90.o
  CC       cairo_test_suite-recordflip.o
  CC       cairo_test_suite-record-extend.o
  CC       cairo_test_suite-record-mesh.o
  CC       cairo_test_suite-recording-surface-pattern.o
  CC       cairo_test_suite-recording-surface-extend.o
  CC       cairo_test_suite-rectangle-rounding-error.o
  CC       cairo_test_suite-rectilinear-fill.o
  CC       cairo_test_suite-rectilinear-grid.o
  CC       cairo_test_suite-rectilinear-miter-limit.o
  CC       cairo_test_suite-rectilinear-dash.o
  CC       cairo_test_suite-rectilinear-dash-scale.o
  CC       cairo_test_suite-rectilinear-stroke.o
  CC       cairo_test_suite-reflected-stroke.o
  CC       cairo_test_suite-rel-path.o
  CC       cairo_test_suite-rgb24-ignore-alpha.o
  CC       cairo_test_suite-rotate-image-surface-paint.o
  CC       cairo_test_suite-rotate-stroke-box.o
  CC       cairo_test_suite-rotated-clip.o
  CC       cairo_test_suite-rounded-rectangle-fill.o
  CC       cairo_test_suite-rounded-rectangle-stroke.o
  CC       cairo_test_suite-sample.o
  CC       cairo_test_suite-scale-down-source-surface-paint.o
  CC       cairo_test_suite-scale-offset-image.o
  CC       cairo_test_suite-scale-offset-similar.o
  CC       cairo_test_suite-scale-source-surface-paint.o
  CC       cairo_test_suite-scaled-font-zero-matrix.o
  CC       cairo_test_suite-stroke-ctm-caps.o
  CC       cairo_test_suite-stroke-clipped.o
  CC       cairo_test_suite-stroke-image.o
  CC       cairo_test_suite-stroke-open-box.o
  CC       cairo_test_suite-select-font-face.o
  CC       cairo_test_suite-select-font-no-show-text.o
  CC       cairo_test_suite-self-copy.o
  CC       cairo_test_suite-self-copy-overlap.o
  CC       cairo_test_suite-self-intersecting.o
  CC       cairo_test_suite-set-source.o
  CC       cairo_test_suite-show-glyphs-advance.o
  CC       cairo_test_suite-show-glyphs-many.o
  CC       cairo_test_suite-show-text-current-point.o
  CC       cairo_test_suite-shape-general-convex.o
  CC       cairo_test_suite-shape-sierpinski.o
  CC       cairo_test_suite-simple.o
  CC       cairo_test_suite-skew-extreme.o
  CC       cairo_test_suite-smask.o
  CC       cairo_test_suite-smask-fill.o
  CC       cairo_test_suite-smask-image-mask.o
  CC       cairo_test_suite-smask-mask.o
  CC       cairo_test_suite-smask-paint.o
  CC       cairo_test_suite-smask-stroke.o
  CC       cairo_test_suite-smask-text.o
  CC       cairo_test_suite-solid-pattern-cache-stress.o
  CC       cairo_test_suite-source-clip.o
  CC       cairo_test_suite-source-clip-scale.o
  CC       cairo_test_suite-source-surface-scale-paint.o
  CC       cairo_test_suite-spline-decomposition.o
  CC       cairo_test_suite-stride-12-image.o
  CC       cairo_test_suite-stroke-pattern.o
  CC       cairo_test_suite-subsurface.o
  CC       cairo_test_suite-subsurface-image-repeat.o
  CC       cairo_test_suite-subsurface-repeat.o
  CC       cairo_test_suite-subsurface-reflect.o
  CC       cairo_test_suite-subsurface-pad.o
  CC       cairo_test_suite-subsurface-modify-child.o
  CC       cairo_test_suite-subsurface-modify-parent.o
  CC       cairo_test_suite-subsurface-outside-target.o
  CC       cairo_test_suite-subsurface-scale.o
  CC       cairo_test_suite-subsurface-similar-repeat.o
  CC       cairo_test_suite-surface-finish-twice.o
  CC       cairo_test_suite-surface-pattern.o
  CC       cairo_test_suite-surface-pattern-big-scale-down.o
  CC       cairo_test_suite-surface-pattern-operator.o
  CC       cairo_test_suite-surface-pattern-scale-down.o
  CC       cairo_test_suite-surface-pattern-scale-down-extend.o
  CC       cairo_test_suite-surface-pattern-scale-up.o
  CC       cairo_test_suite-text-antialias.o
  CC       cairo_test_suite-text-antialias-subpixel.o
  CC       cairo_test_suite-text-cache-crash.o
  CC       cairo_test_suite-text-glyph-range.o
  CC       cairo_test_suite-text-pattern.o
  CC       cairo_test_suite-text-rotate.o
  CC       cairo_test_suite-text-transform.o
  CC       cairo_test_suite-text-zero-len.o
  CC       cairo_test_suite-tighten-bounds.o
  CC       cairo_test_suite-tiger.o
  CC       cairo_test_suite-toy-font-face.o
  CC       cairo_test_suite-transforms.o
  CC       cairo_test_suite-translate-show-surface.o
  CC       cairo_test_suite-trap-clip.o
  CC       cairo_test_suite-twin.o
  CC       cairo_test_suite-twin-antialias-gray.o
  CC       cairo_test_suite-twin-antialias-mixed.o
  CC       cairo_test_suite-twin-antialias-none.o
  CC       cairo_test_suite-twin-antialias-subpixel.o
  CC       cairo_test_suite-unaligned-box.o
  CC       cairo_test_suite-unantialiased-shapes.o
  CC       cairo_test_suite-unbounded-operator.o
  CC       cairo_test_suite-unclosed-strokes.o
  CC       cairo_test_suite-user-data.o
  CC       cairo_test_suite-user-font.o
  CC       cairo_test_suite-user-font-mask.o
  CC       cairo_test_suite-user-font-proxy.o
  CC       cairo_test_suite-user-font-rescale.o
  CC       cairo_test_suite-world-map.o
  CC       cairo_test_suite-white-in-noop.o
  CC       cairo_test_suite-xcb-huge-image-shm.o
  CC       cairo_test_suite-xcb-huge-subimage.o
  CC       cairo_test_suite-xcb-stress-cache.o
  CC       cairo_test_suite-xcb-snapshot-assert.o
  CC       cairo_test_suite-xcomposite-projection.o
  CC       cairo_test_suite-xlib-expose-event.o
  CC       cairo_test_suite-zero-alpha.o
  CC       cairo_test_suite-zero-mask.o
  CC       cairo_test_suite-pthread-same-source.o
  CC       cairo_test_suite-pthread-show-text.o
  CC       cairo_test_suite-pthread-similar.o
  CC       cairo_test_suite-bitmap-font.o
  CC       cairo_test_suite-ft-font-create-for-ft-face.o
  CC       cairo_test_suite-ft-show-glyphs-positioning.o
  CC       cairo_test_suite-ft-show-glyphs-table.o
  CC       cairo_test_suite-ft-text-vertical-layout-type1.o
  CC       cairo_test_suite-ft-text-vertical-layout-type3.o
  CC       cairo_test_suite-ft-text-antialias-none.o
  CC       cairo_test_suite-pdf-features.o
  CC       cairo_test_suite-pdf-mime-data.o
  CC       cairo_test_suite-pdf-surface-source.o
  CC       cairo_test_suite-ps-eps.o
  CC       cairo_test_suite-ps-features.o
  CC       cairo_test_suite-ps-surface-source.o
  CC       cairo_test_suite-svg-surface.o
  CC       cairo_test_suite-svg-clip.o
  CC       cairo_test_suite-svg-surface-source.o
  CC       cairo_test_suite-xcb-surface-source.o
  CC       cairo_test_suite-multi-page.o
  CC       cairo_test_suite-fallback-resolution.o
  CC       cairo_test_suite-cairo-test-constructors.o
  CC       any2ppm-any2ppm.o
  CCLD     any2ppm
  CCLD     cairo-test-suite
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/test'
make[3]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/test'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/test'
Making all in perf
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/perf'
make  all-recursive
make[3]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/perf'
Making all in micro
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/perf/micro'
make  all-am
make[5]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/perf/micro'
  CC       cairo-perf-cover.lo
  CC       box-outline.lo
  CC       composite-checker.lo
  CC       disjoint.lo
  CC       fill.lo
  CC       hatching.lo
  CC       hash-table.lo
  CC       line.lo
  CC       a1-line.lo
  CC       long-lines.lo
  CC       mosaic.lo
  CC       paint.lo
  CC       paint-with-alpha.lo
  CC       mask.lo
  CC       pattern_create_radial.lo
  CC       rectangles.lo
  CC       rounded-rectangles.lo
  CC       stroke.lo
  CC       subimage_copy.lo
  CC       tessellate.lo
  CC       text.lo
  CC       tiger.lo
  CC       glyphs.lo
  CC       twin.lo
  CC       unaligned-clip.lo
  CC       wave.lo
  CC       world-map.lo
  CC       zrusin.lo
  CC       long-dashed-lines.lo
  CC       dragon.lo
  CC       pythagoras-tree.lo
  CC       intersections.lo
  CC       many-strokes.lo
  CC       wide-strokes.lo
  CC       many-fills.lo
  CC       wide-fills.lo
  CC       many-curves.lo
  CC       curve.lo
  CC       a1-curve.lo
  CC       spiral.lo
spiral.c: In function 'draw_spiral_stroke':
spiral.c:171:5: warning: missed loop optimization, the loop counter may overflow [-Wunsafe-loop-optimizations]
  if (side <= 0)
     ^
  CC       pixel.lo
  CC       sierpinski.lo
  CC       fill-clip.lo
  CCLD     libcairo-perf-micro.la
make[5]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/perf/micro'
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/perf/micro'
make[4]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12/perf'
  CC       cairo-analyse-trace.o
  CC       cairo-error.o
  CC       cairo-perf.lo
  CC       cairo-perf-report.lo
  CC       cairo-stats.lo
  CC       cairo-time.lo
  CCLD     libcairoperf.la
  CCLD     cairo-analyse-trace
  CC       cairo-perf-trace.o
  CC       cairo-hash.o
  CCLD     cairo-perf-trace
  CC       cairo-perf-micro.o
  CCLD     cairo-perf-micro
make[4]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/perf'
make[3]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/perf'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12/perf'
make[2]: Entering directory '/lfskernel/sources/boot/cairo-1.14.12'
Makefile:1501: warning: overriding recipe for target 'recheck'
Makefile:1139: warning: ignoring old recipe for target 'recheck'
make[2]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12'
make[1]: Leaving directory '/lfskernel/sources/boot/cairo-1.14.12'
